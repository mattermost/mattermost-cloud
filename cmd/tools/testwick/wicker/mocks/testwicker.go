// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
//

// Code generated by MockGen. DO NOT EDIT.
// Source: testwicker.go

// Package mock_testwick is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-cloud/model"
	model0 "github.com/mattermost/mattermost-server/v5/model"
)

// MockMattermostRequester is a mock of MattermostRequester interface.
type MockMattermostRequester struct {
	ctrl     *gomock.Controller
	recorder *MockMattermostRequesterMockRecorder
}

// MockMattermostRequesterMockRecorder is the mock recorder for MockMattermostRequester.
type MockMattermostRequesterMockRecorder struct {
	mock *MockMattermostRequester
}

// NewMockMattermostRequester creates a new mock instance.
func NewMockMattermostRequester(ctrl *gomock.Controller) *MockMattermostRequester {
	mock := &MockMattermostRequester{ctrl: ctrl}
	mock.recorder = &MockMattermostRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMattermostRequester) EXPECT() *MockMattermostRequesterMockRecorder {
	return m.recorder
}

// AddTeamMember mocks base method.
func (m *MockMattermostRequester) AddTeamMember(teamID, userID string) (*model0.TeamMember, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTeamMember", teamID, userID)
	ret0, _ := ret[0].(*model0.TeamMember)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// AddTeamMember indicates an expected call of AddTeamMember.
func (mr *MockMattermostRequesterMockRecorder) AddTeamMember(teamID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTeamMember", reflect.TypeOf((*MockMattermostRequester)(nil).AddTeamMember), teamID, userID)
}

// CreateChannel mocks base method.
func (m *MockMattermostRequester) CreateChannel(channel *model0.Channel) (*model0.Channel, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChannel", channel)
	ret0, _ := ret[0].(*model0.Channel)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// CreateChannel indicates an expected call of CreateChannel.
func (mr *MockMattermostRequesterMockRecorder) CreateChannel(channel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChannel", reflect.TypeOf((*MockMattermostRequester)(nil).CreateChannel), channel)
}

// CreateIncomingWebhook mocks base method.
func (m *MockMattermostRequester) CreateIncomingWebhook(webhoo *model0.IncomingWebhook) (*model0.IncomingWebhook, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIncomingWebhook", webhoo)
	ret0, _ := ret[0].(*model0.IncomingWebhook)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// CreateIncomingWebhook indicates an expected call of CreateIncomingWebhook.
func (mr *MockMattermostRequesterMockRecorder) CreateIncomingWebhook(webhoo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIncomingWebhook", reflect.TypeOf((*MockMattermostRequester)(nil).CreateIncomingWebhook), webhoo)
}

// CreatePost mocks base method.
func (m *MockMattermostRequester) CreatePost(post *model0.Post) (*model0.Post, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", post)
	ret0, _ := ret[0].(*model0.Post)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockMattermostRequesterMockRecorder) CreatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockMattermostRequester)(nil).CreatePost), post)
}

// CreateTeam mocks base method.
func (m *MockMattermostRequester) CreateTeam(team *model0.Team) (*model0.Team, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTeam", team)
	ret0, _ := ret[0].(*model0.Team)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// CreateTeam indicates an expected call of CreateTeam.
func (mr *MockMattermostRequesterMockRecorder) CreateTeam(team interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTeam", reflect.TypeOf((*MockMattermostRequester)(nil).CreateTeam), team)
}

// CreateUser mocks base method.
func (m *MockMattermostRequester) CreateUser(user *model0.User) (*model0.User, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(*model0.User)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockMattermostRequesterMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMattermostRequester)(nil).CreateUser), user)
}

// GetPing mocks base method.
func (m *MockMattermostRequester) GetPing() (string, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPing")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// GetPing indicates an expected call of GetPing.
func (mr *MockMattermostRequesterMockRecorder) GetPing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPing", reflect.TypeOf((*MockMattermostRequester)(nil).GetPing))
}

// Login mocks base method.
func (m *MockMattermostRequester) Login(username, password string) (*model0.User, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", username, password)
	ret0, _ := ret[0].(*model0.User)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockMattermostRequesterMockRecorder) Login(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockMattermostRequester)(nil).Login), username, password)
}

// Logout mocks base method.
func (m *MockMattermostRequester) Logout() (bool, *model0.Response) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(*model0.Response)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockMattermostRequesterMockRecorder) Logout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockMattermostRequester)(nil).Logout))
}

// MockProvisionerRequester is a mock of ProvisionerRequester interface.
type MockProvisionerRequester struct {
	ctrl     *gomock.Controller
	recorder *MockProvisionerRequesterMockRecorder
}

// MockProvisionerRequesterMockRecorder is the mock recorder for MockProvisionerRequester.
type MockProvisionerRequesterMockRecorder struct {
	mock *MockProvisionerRequester
}

// NewMockProvisionerRequester creates a new mock instance.
func NewMockProvisionerRequester(ctrl *gomock.Controller) *MockProvisionerRequester {
	mock := &MockProvisionerRequester{ctrl: ctrl}
	mock.recorder = &MockProvisionerRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvisionerRequester) EXPECT() *MockProvisionerRequesterMockRecorder {
	return m.recorder
}

// CreateInstallation mocks base method.
func (m *MockProvisionerRequester) CreateInstallation(request *model.CreateInstallationRequest) (*model.InstallationDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallation", request)
	ret0, _ := ret[0].(*model.InstallationDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallation indicates an expected call of CreateInstallation.
func (mr *MockProvisionerRequesterMockRecorder) CreateInstallation(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallation", reflect.TypeOf((*MockProvisionerRequester)(nil).CreateInstallation), request)
}

// DeleteInstallation mocks base method.
func (m *MockProvisionerRequester) DeleteInstallation(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstallation", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstallation indicates an expected call of DeleteInstallation.
func (mr *MockProvisionerRequesterMockRecorder) DeleteInstallation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstallation", reflect.TypeOf((*MockProvisionerRequester)(nil).DeleteInstallation), id)
}

// GetInstallation mocks base method.
func (m *MockProvisionerRequester) GetInstallation(id string, request *model.GetInstallationRequest) (*model.InstallationDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstallation", id, request)
	ret0, _ := ret[0].(*model.InstallationDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstallation indicates an expected call of GetInstallation.
func (mr *MockProvisionerRequesterMockRecorder) GetInstallation(id, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstallation", reflect.TypeOf((*MockProvisionerRequester)(nil).GetInstallation), id, request)
}
