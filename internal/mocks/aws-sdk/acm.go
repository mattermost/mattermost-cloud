// Copyright (c) Mattermost, Inc. All Rights Reserved.
// See LICENSE.txt for license information.
//
// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/mattermost/mattermost-cloud/internal/tools/aws (interfaces: ACMAPI)

// Package mockawssdk is a generated GoMock package.
package mockawssdk

import (
	context "context"
	reflect "reflect"

	acm "github.com/aws/aws-sdk-go-v2/service/acm"
	gomock "github.com/golang/mock/gomock"
)

// MockACMAPI is a mock of ACMAPI interface
type MockACMAPI struct {
	ctrl     *gomock.Controller
	recorder *MockACMAPIMockRecorder
}

// MockACMAPIMockRecorder is the mock recorder for MockACMAPI
type MockACMAPIMockRecorder struct {
	mock *MockACMAPI
}

// NewMockACMAPI creates a new mock instance
func NewMockACMAPI(ctrl *gomock.Controller) *MockACMAPI {
	mock := &MockACMAPI{ctrl: ctrl}
	mock.recorder = &MockACMAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockACMAPI) EXPECT() *MockACMAPIMockRecorder {
	return m.recorder
}

// ListCertificates mocks base method
func (m *MockACMAPI) ListCertificates(arg0 context.Context, arg1 *acm.ListCertificatesInput, arg2 ...func(*acm.Options)) (*acm.ListCertificatesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCertificates", varargs...)
	ret0, _ := ret[0].(*acm.ListCertificatesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCertificates indicates an expected call of ListCertificates
func (mr *MockACMAPIMockRecorder) ListCertificates(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCertificates", reflect.TypeOf((*MockACMAPI)(nil).ListCertificates), varargs...)
}

// ListTagsForCertificate mocks base method
func (m *MockACMAPI) ListTagsForCertificate(arg0 context.Context, arg1 *acm.ListTagsForCertificateInput, arg2 ...func(*acm.Options)) (*acm.ListTagsForCertificateOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTagsForCertificate", varargs...)
	ret0, _ := ret[0].(*acm.ListTagsForCertificateOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTagsForCertificate indicates an expected call of ListTagsForCertificate
func (mr *MockACMAPIMockRecorder) ListTagsForCertificate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTagsForCertificate", reflect.TypeOf((*MockACMAPI)(nil).ListTagsForCertificate), varargs...)
}
