name: ci

on:
  pull_request:
  push:
    branches:
      - master

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: ci/checkout-repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod

      - name: ci/check-style
        run: make check-style

      - name: ci/check-modules
        run: make check-modules

  mocks:
    runs-on: ubuntu-24.04
    steps:
      - name: ci/checkout-repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod

      - name: ci/check-mocks
        run: make verify-mocks

  test:
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: cimg/postgres:14.8
        env:
          POSTGRES_USER: cloud_test
          POSTGRES_DB: cloud_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: ci/checkout-repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@0c52d547c9bc32b1aa3301fd7a9cb496313a4491 # v5.0.0
        with:
          go-version-file: go.mod

      - name: ci/test-postgres
        run: make unittest goverall
        env:
          CLOUD_DATABASE: postgres://cloud_test@localhost:5432/cloud_test?sslmode=disable

      - name: ci/test-testwick
        run: make unittest
        working-directory: ./cmd/tools/testwick

  # Build AMD64 image (fast native build)
  build-amd64:
    runs-on: ubuntu-24.04
    needs: [test, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build AMD64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            . -f build/Dockerfile -t mattermost/mattermost-cloud:temp-${{ github.sha }}-amd64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Build ARM64 image (fast native build)
  build-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [test, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build ARM64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/arm64 \
            . -f build/Dockerfile -t mattermost/mattermost-cloud:temp-${{ github.sha }}-arm64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Create unified multi-arch manifest (clean tag)
  create-manifest:
    runs-on: ubuntu-24.04
    needs: [build-amd64, build-arm64]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create unified multi-arch manifest
        run: |
          # Determine clean tag
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CLEAN_TAG="pr-${{ github.event.number }}"
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            CLEAN_TAG="latest"
          else
            CLEAN_TAG="${{ github.ref_name }}"
          fi
          
          # Create manifest from temp tags
          docker manifest create mattermost/mattermost-cloud:${CLEAN_TAG} \
            --amend mattermost/mattermost-cloud:temp-${{ github.sha }}-amd64 \
            --amend mattermost/mattermost-cloud:temp-${{ github.sha }}-arm64
          
          # Push the clean unified tag
          docker manifest push mattermost/mattermost-cloud:${CLEAN_TAG}
          
          echo "‚úÖ Clean unified multi-arch tag: mattermost/mattermost-cloud:${CLEAN_TAG}"
          
          # Cleanup temp tags from Docker Hub
          echo "üóëÔ∏è  Cleaning up temp tags..."
          
          # Note: Docker Hub API doesn't have direct delete via docker CLI
          # We'll use Docker Hub API to delete the temp tags
          
          TEMP_AMD64_TAG="temp-${{ github.sha }}-amd64"
          TEMP_ARM64_TAG="temp-${{ github.sha }}-arm64"
          
          # Get Docker Hub token
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Delete temp AMD64 tag
          curl -i -X DELETE \
            -H "Authorization: JWT ${TOKEN}" \
            https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud/tags/${TEMP_AMD64_TAG}/
          
          # Delete temp ARM64 tag  
          curl -i -X DELETE \
            -H "Authorization: JWT ${TOKEN}" \
            https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud/tags/${TEMP_ARM64_TAG}/
            
          echo "‚úÖ Temp tags cleaned up from Docker Hub"

  # Build E2E AMD64 (native build, parallel with main builds)
  build-e2e-amd64:
    runs-on: ubuntu-24.04
    needs: [test, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build E2E AMD64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            . -f build/Dockerfile.e2e -t mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-amd64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Build E2E ARM64 (native build on ARM runner, parallel with main builds)
  build-e2e-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [test, lint]
    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build E2E ARM64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/arm64 \
            . -f build/Dockerfile.e2e -t mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-arm64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Create unified E2E multi-arch manifest
  create-e2e-manifest:
    runs-on: ubuntu-24.04
    needs: [build-e2e-amd64, build-e2e-arm64]
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create unified E2E multi-arch manifest
        run: |
          # Create manifest from temp tags
          docker manifest create mattermost/mattermost-cloud-e2e:test \
            --amend mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-amd64 \
            --amend mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-arm64
          
          # Push the clean unified tag
          docker manifest push mattermost/mattermost-cloud-e2e:test
          
          echo "‚úÖ Clean unified E2E multi-arch tag: mattermost/mattermost-cloud-e2e:test"
          
          # Cleanup temp E2E tags from Docker Hub
          echo "üóëÔ∏è  Cleaning up temp E2E tags..."
          
          TEMP_AMD64_TAG="temp-${{ github.sha }}-amd64"
          TEMP_ARM64_TAG="temp-${{ github.sha }}-arm64"
          
          # Get Docker Hub token
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Delete temp E2E tags
          curl -i -X DELETE \
            -H "Authorization: JWT ${TOKEN}" \
            https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud-e2e/tags/${TEMP_AMD64_TAG}/
          
          curl -i -X DELETE \
            -H "Authorization: JWT ${TOKEN}" \
            https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud-e2e/tags/${TEMP_ARM64_TAG}/
            
          echo "‚úÖ Temp E2E tags cleaned up from Docker Hub"
