name: ci

on:
  pull_request:
  push:
    branches:
      - master

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-24.04
    steps:
      - name: ci/checkout-repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod

      - name: ci/check-style
        run: make check-style

      - name: ci/check-modules
        run: make check-modules

  mocks:
    runs-on: ubuntu-24.04
    steps:
      - name: ci/checkout-repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod

      - name: ci/check-mocks
        run: make verify-mocks

  test:
    runs-on: ubuntu-24.04
    services:
      postgres:
        image: cimg/postgres:14.8
        env:
          POSTGRES_USER: cloud_test
          POSTGRES_DB: cloud_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: ci/checkout-repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod

      - name: ci/test-postgres
        run: make unittest goverall
        env:
          CLOUD_DATABASE: postgres://cloud_test@localhost:5432/cloud_test?sslmode=disable

      - name: ci/test-testwick
        run: make unittest
        working-directory: ./cmd/tools/testwick

  # Build AMD64 image (fast native build)
  build-amd64:
    runs-on: ubuntu-24.04
    needs: [test, lint]
    if: ${{ (github.event_name == 'pull_request' || github.ref_name  == 'master') && github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build AMD64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            . -f build/Dockerfile -t mattermost/mattermost-cloud:temp-${{ github.sha }}-amd64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Build ARM64 image (fast native build)
  build-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [test, lint]
    if: ${{ (github.event_name == 'pull_request' || github.ref_name  == 'master') && github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build ARM64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/arm64 \
            . -f build/Dockerfile -t mattermost/mattermost-cloud:temp-${{ github.sha }}-arm64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Create unified multi-arch manifest (clean tag)
  create-manifest:
    runs-on: ubuntu-24.04
    needs: [build-amd64, build-arm64]
    if: ${{ (github.event_name == 'pull_request' || github.ref_name  == 'master') && github.actor != 'dependabot[bot]' }}
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create unified multi-arch manifest
        run: |
          # Determine clean tag
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CLEAN_TAG="pr-${{ github.event.number }}"
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            # Create timestamp-based tag for master merges (format: test-YYYYMMDD.HHMMSS)
            TIMESTAMP=$(date -u +"%Y%m%d.%H%M%S")
            CLEAN_TAG="test-${TIMESTAMP}"
          else
            CLEAN_TAG="${{ github.ref_name }}"
          fi
          
          # Create manifest from temp tags
          docker manifest create mattermost/mattermost-cloud:${CLEAN_TAG} \
            --amend mattermost/mattermost-cloud:temp-${{ github.sha }}-amd64 \
            --amend mattermost/mattermost-cloud:temp-${{ github.sha }}-arm64
          
          # Push the clean unified tag
          docker manifest push mattermost/mattermost-cloud:${CLEAN_TAG}
          
          echo "‚úÖ Clean unified multi-arch tag: mattermost/mattermost-cloud:${CLEAN_TAG}"
          
          # Cleanup temp tags using Docker Hub API
          echo "üóëÔ∏è  Cleaning up temp tags from Docker Hub..."
          
          # Delete temp tags using Docker Hub API
          TEMP_AMD64_TAG="temp-${{ github.sha }}-amd64"
          TEMP_ARM64_TAG="temp-${{ github.sha }}-arm64"
          
          # Get Docker Hub API token
          DOCKER_HUB_TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.DOCKERHUB_USERNAME }}", "password": "${{ secrets.DOCKERHUB_CLEANUP_TOKEN }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Delete AMD64 temp tag
          curl -X DELETE \
            -H "Authorization: JWT ${DOCKER_HUB_TOKEN}" \
            "https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud/tags/${TEMP_AMD64_TAG}/" \
            && echo "‚úÖ Deleted AMD64 temp tag" || echo "‚ö†Ô∏è  AMD64 temp tag not found or already deleted"
          
          # Delete ARM64 temp tag
          curl -X DELETE \
            -H "Authorization: JWT ${DOCKER_HUB_TOKEN}" \
            "https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud/tags/${TEMP_ARM64_TAG}/" \
            && echo "‚úÖ Deleted ARM64 temp tag" || echo "‚ö†Ô∏è  ARM64 temp tag not found or already deleted"
          
          echo "‚úÖ Temp tags cleaned up from Docker Hub"

  # Build E2E AMD64 (native build, parallel with main builds)
  build-e2e-amd64:
    runs-on: ubuntu-24.04
    needs: [test, lint]
    if: ${{ (github.event_name == 'pull_request' || github.ref_name  == 'master') && github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build E2E AMD64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/amd64 \
            . -f build/Dockerfile.e2e -t mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-amd64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Build E2E ARM64 (native build on ARM runner, parallel with main builds)
  build-e2e-arm64:
    runs-on: ubuntu-24.04-arm
    needs: [test, lint]
    if: ${{ (github.event_name == 'pull_request' || github.ref_name  == 'master') && github.actor != 'dependabot[bot]' }}
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build E2E ARM64 image (temp tag)
        run: |
          docker buildx build \
            --platform linux/arm64 \
            . -f build/Dockerfile.e2e -t mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-arm64 \
            --push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}

  # Create unified E2E multi-arch manifest
  create-e2e-manifest:
    runs-on: ubuntu-24.04
    needs: [build-e2e-amd64, build-e2e-arm64]
    if: ${{ (github.event_name == 'pull_request' || github.ref_name  == 'master') && github.actor != 'dependabot[bot]' }}
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create unified E2E multi-arch manifest
        run: |
          # Determine E2E tag based on event type (same logic as main image)
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            E2E_TAG="test"
          elif [ "${{ github.ref }}" = "refs/heads/master" ]; then
            # Create timestamp-based tag for master merges (format: test-YYYYMMDD.HHMMSS)
            TIMESTAMP=$(date -u +"%Y%m%d.%H%M%S")
            E2E_TAG="test-${TIMESTAMP}"
          else
            E2E_TAG="test"
          fi
          
          # Create manifest from temp tags
          docker manifest create mattermost/mattermost-cloud-e2e:${E2E_TAG} \
            --amend mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-amd64 \
            --amend mattermost/mattermost-cloud-e2e:temp-${{ github.sha }}-arm64
          
          # Push the clean unified tag
          docker manifest push mattermost/mattermost-cloud-e2e:${E2E_TAG}
          
          echo "‚úÖ Clean unified E2E multi-arch tag: mattermost/mattermost-cloud-e2e:${E2E_TAG}"
          
          # Cleanup temp E2E tags using Docker Hub API
          echo "üóëÔ∏è  Cleaning up temp E2E tags from Docker Hub..."
          
          # Delete temp E2E tags using Docker Hub API
          TEMP_AMD64_TAG="temp-${{ github.sha }}-amd64"
          TEMP_ARM64_TAG="temp-${{ github.sha }}-arm64"
          
          # Get Docker Hub API token
          DOCKER_HUB_TOKEN=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d '{"username": "${{ secrets.DOCKERHUB_USERNAME }}", "password": "${{ secrets.DOCKERHUB_CLEANUP_TOKEN }}"}' \
            https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Delete E2E AMD64 temp tag
          curl -X DELETE \
            -H "Authorization: JWT ${DOCKER_HUB_TOKEN}" \
            "https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud-e2e/tags/${TEMP_AMD64_TAG}/" \
            && echo "‚úÖ Deleted E2E AMD64 temp tag" || echo "‚ö†Ô∏è  E2E AMD64 temp tag not found or already deleted"
          
          # Delete E2E ARM64 temp tag
          curl -X DELETE \
            -H "Authorization: JWT ${DOCKER_HUB_TOKEN}" \
            "https://hub.docker.com/v2/repositories/mattermost/mattermost-cloud-e2e/tags/${TEMP_ARM64_TAG}/" \
            && echo "‚úÖ Deleted E2E ARM64 temp tag" || echo "‚ö†Ô∏è  E2E ARM64 temp tag not found or already deleted"
          
          echo "‚úÖ Temp E2E tags cleaned up from Docker Hub"
